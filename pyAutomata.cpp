/* Generated by Cython 0.13 on Fri Sep  9 11:30:32 2011 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#else

#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif

#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif

#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif

#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif

#if PY_VERSION_HEX < 0x02040000
  #define METH_COEXIST 0
  #define PyDict_CheckExact(op) (Py_TYPE(op) == &PyDict_Type)
  #define PyDict_Contains(d,o)   PySequence_Contains(d,o)
#endif

#if PY_VERSION_HEX < 0x02050000
  typedef int Py_ssize_t;
  #define PY_SSIZE_T_MAX INT_MAX
  #define PY_SSIZE_T_MIN INT_MIN
  #define PY_FORMAT_SIZE_T ""
  #define PyInt_FromSsize_t(z) PyInt_FromLong(z)
  #define PyInt_AsSsize_t(o)   PyInt_AsLong(o)
  #define PyNumber_Index(o)    PyNumber_Int(o)
  #define PyIndex_Check(o)     PyNumber_Check(o)
  #define PyErr_WarnEx(category, message, stacklevel) PyErr_Warn(category, message)
#endif

#if PY_VERSION_HEX < 0x02060000
  #define Py_REFCNT(ob) (((PyObject*)(ob))->ob_refcnt)
  #define Py_TYPE(ob)   (((PyObject*)(ob))->ob_type)
  #define Py_SIZE(ob)   (((PyVarObject*)(ob))->ob_size)
  #define PyVarObject_HEAD_INIT(type, size) \
          PyObject_HEAD_INIT(type) size,
  #define PyType_Modified(t)

  typedef struct {
     void *buf;
     PyObject *obj;
     Py_ssize_t len;
     Py_ssize_t itemsize;
     int readonly;
     int ndim;
     char *format;
     Py_ssize_t *shape;
     Py_ssize_t *strides;
     Py_ssize_t *suboffsets;
     void *internal;
  } Py_buffer;

  #define PyBUF_SIMPLE 0
  #define PyBUF_WRITABLE 0x0001
  #define PyBUF_FORMAT 0x0004
  #define PyBUF_ND 0x0008
  #define PyBUF_STRIDES (0x0010 | PyBUF_ND)
  #define PyBUF_C_CONTIGUOUS (0x0020 | PyBUF_STRIDES)
  #define PyBUF_F_CONTIGUOUS (0x0040 | PyBUF_STRIDES)
  #define PyBUF_ANY_CONTIGUOUS (0x0080 | PyBUF_STRIDES)
  #define PyBUF_INDIRECT (0x0100 | PyBUF_STRIDES)

#endif

#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
#endif

#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif

#if (PY_VERSION_HEX < 0x02060000) || (PY_MAJOR_VERSION >= 3)
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif

#if PY_VERSION_HEX < 0x02060000
  #define PyBytesObject                PyStringObject
  #define PyBytes_Type                 PyString_Type
  #define PyBytes_Check                PyString_Check
  #define PyBytes_CheckExact           PyString_CheckExact
  #define PyBytes_FromString           PyString_FromString
  #define PyBytes_FromStringAndSize    PyString_FromStringAndSize
  #define PyBytes_FromFormat           PyString_FromFormat
  #define PyBytes_DecodeEscape         PyString_DecodeEscape
  #define PyBytes_AsString             PyString_AsString
  #define PyBytes_AsStringAndSize      PyString_AsStringAndSize
  #define PyBytes_Size                 PyString_Size
  #define PyBytes_AS_STRING            PyString_AS_STRING
  #define PyBytes_GET_SIZE             PyString_GET_SIZE
  #define PyBytes_Repr                 PyString_Repr
  #define PyBytes_Concat               PyString_Concat
  #define PyBytes_ConcatAndDel         PyString_ConcatAndDel
  #define PySet_Check(obj)             PyObject_TypeCheck(obj, &PySet_Type)
  #define PyFrozenSet_Check(obj)       PyObject_TypeCheck(obj, &PyFrozenSet_Type)
#endif

#ifndef PySet_CheckExact
#  define PySet_CheckExact(obj)          (Py_TYPE(obj) == &PySet_Type)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject PyLongObject
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),((char *)(n)))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),((char *)(n)),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),((char *)(n)))
#else
  #define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
  #define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
  #define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#endif

#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif

#ifdef __cplusplus
#define __PYX_EXTERN_C extern "C"
#else
#define __PYX_EXTERN_C extern
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE_API__PyAutomata__pyAutomata
#include <string>
#include "stdlib.h"
#include "Automata.h"

/* inline attribute */
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE 
  #endif
#endif

/* unused attribute */
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__)) 
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || defined(__INTEL_COMPILER)
#   define CYTHON_UNUSED __attribute__ ((__unused__)) 
# else
#   define CYTHON_UNUSED 
# endif
#endif

typedef struct {PyObject **p; char *s; const long n; const char* encoding; const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/


/* Type Conversion Predeclarations */

#define __Pyx_PyBytes_FromUString(s) PyBytes_FromString((char*)s)
#define __Pyx_PyBytes_AsUString(s)   ((unsigned char*) PyBytes_AsString(s))

#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject*);

#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))


#ifdef __GNUC__
/* Test for GCC > 2.95 */
#if __GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)) 
#define likely(x)   __builtin_expect(!!(x), 1)
#define unlikely(x) __builtin_expect(!!(x), 0)
#else /* __GNUC__ > 2 ... */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ > 2 ... */
#else /* __GNUC__ */
#define likely(x)   (x)
#define unlikely(x) (x)
#endif /* __GNUC__ */
    
static PyObject *__pyx_m;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pyAutomata.pyx",
};

/* Type declarations */

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":150
 * # Here, define what you want to use in the Python Class
 * # REMEMBER! This isn't python - this is C++!
 * cdef class pyautomata:             # <<<<<<<<<<<<<<
 *     '''
 *     The goal of this class is to expose the c++ library.  It is NOT, I repeat, NOT
 */

struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata {
  PyObject_HEAD
  struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata *__pyx_vtab;
  unsigned int p_rule;
  unsigned int p_seedIsRandom;
  unsigned int p_seedStartingPosition;
  unsigned int p_generationLength;
  PyObject *_overallIndex;
  Automata::Automata *thisptr;
};


struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata {
  PyObject *(*updateParams)(struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *);
};
static struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata *__pyx_vtabptr_10PyAutomata_10pyAutomata_pyautomata;

#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif

#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct * __Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
  end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
  }
  #define __Pyx_RefNannySetupContext(name)           void *__pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
  #define __Pyx_RefNannyFinishContext()           __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r) __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r) __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r) __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XDECREF(r) do { if((r) != NULL) {__Pyx_DECREF(r);} } while(0)
#else
  #define __Pyx_RefNannySetupContext(name)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);} } while(0)
#define __Pyx_XGOTREF(r) do { if((r) != NULL) {__Pyx_GOTREF(r);} } while(0)

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict,
    const char* function_name, int kw_allowed); /*proto*/


static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}


#define __Pyx_GetItemInt_List(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_List_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
            PyObject *r = PyList_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyList_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyList_GET_ITEM(o, PyList_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

#define __Pyx_GetItemInt_Tuple(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Tuple_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i) {
    if (likely(o != Py_None)) {
        if (likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, i);
            Py_INCREF(r);
            return r;
        }
        else if ((-PyTuple_GET_SIZE(o) <= i) & (i < 0)) {
            PyObject *r = PyTuple_GET_ITEM(o, PyTuple_GET_SIZE(o) + i);
            Py_INCREF(r);
            return r;
        }
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}


#define __Pyx_GetItemInt(o, i, size, to_py_func) (((size) <= sizeof(Py_ssize_t)) ? \
                                                    __Pyx_GetItemInt_Fast(o, i) : \
                                                    __Pyx_GetItemInt_Generic(o, to_py_func(i)))

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i) {
    PyObject *r;
    if (PyList_CheckExact(o) && ((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (PyTuple_CheckExact(o) && ((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
    }
    else if (Py_TYPE(o)->tp_as_sequence && Py_TYPE(o)->tp_as_sequence->sq_item && (likely(i >= 0))) {
        r = PySequence_GetItem(o, i);
    }
    else {
        r = __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
    }
    return r;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name, PyObject* kw_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],     PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,     const char* function_name); /*proto*/

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject *);

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject *);

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject *);

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject *);

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject *);

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject *);

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject *);

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject *);

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject *);

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject *);

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject *);

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject *);

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject *);

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject *);

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static void __Pyx_AddTraceback(const char *funcname); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/
/* Module declarations from PyAutomata.pyAutomata */

static PyTypeObject *__pyx_ptype_10PyAutomata_10pyAutomata_pyautomata = 0;
#define __Pyx_MODULE_NAME "PyAutomata.pyAutomata"
int __pyx_module_is_main_PyAutomata__pyAutomata = 0;

/* Implementation of PyAutomata.pyAutomata */
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "p_seedStartingPosition";
static char __pyx_k_2[] = "currentGenerationIndex";
static char __pyx_k_3[] = "";
static char __pyx_k_4[] = "bStringFromCurrentGeneration";
static char __pyx_k_5[] = "stringFromCurrentGeneration";
static char __pyx_k_6[] = "chunks_FromCurrentGeneration";
static char __pyx_k_7[] = "\n(c) Blaine Booher 2010-2011\nLicensed under GPLv2.0\nautomata-1.0 is Licensed under the Apache v2.0 license and (c) Alex Reynolds\nand (c) Blaine Booher\n\nTry to document everything in this file, rather than the .cpp file. the .cpp \ndocumentation is fine, but the doc strings in this file are what will show up\non the python end of the runtime.\n\nThe main ways to get data out of the cellular automata:\n    def bStringFromCurrentGeneration(self) '00101010 01110110'\n    def stringFromCurrentGeneration(self)  '  # # #   ### ## '\n    def chunks_FromCurrentGeneration(self,unsigned int bits=8) [\n    \nThe main way to use iterate the cellular automata is easy:\n    def iterateAutomata(self)\n    \nSome helper functions for your convenience:\n    def fillBuffer(self)\n    \nfrom a python interpreter:\nfrom PyAutomata import pyautomata #That's this file!\nca = pyautomata() # Instantiate with default params\nca = pyautomata(110) # rule 110\nca = pyautomata(110, 1000) # rule 110, 1000 cells\n\nprint ca.stringFromCurrentGeneration()\nfor i in xrange(100):\n    ca.iterateAutomata()\n    print ca.stringFromCurrentGeneration()\n\nThat's about it!\n\nNotes!\n------\n\n /**********'-0__0-'***************************************-0__o-************** |                                                                             |\n |          And remember, always: It can be easier to think of this file       |\n |              as a real compiled C++ object.  The python code is only        |\n |              a formality.  Everything here turns into cold, hard, C++       |\n |                                                                             |\n \\******************************+~.._/''\\_..~+*********************************/\n\n# *** This is how to convert from string to character array ***\n#Requires:\ncdef extern from \"<string>\" namespace \"std\":\n    cdef cppclass string:\n        char* c_str()\n        int size()\n        \n# from http://wiki.cython.org/DynamicMem""oryAllocation\ncdef extern from \"stdlib.h\":\n    ctypedef unsigned long size_t\n    void free(void *ptr)\n    void *malloc(size_t size)\n    char *strcpy(char *dest, char *src)\n\nstring str1 = self.thisptr.some_function_that_returns_std::string()\ncdef char *cstr = <char*>malloc(str1.size() + 1) #+1 to compensate for \000\nstrcpy(cstr, str1.c_str())\nprint strlen(c) # Returns number of characters before \000 is hit\nprint sizeof(c) # Returns number of bytes...\nret = str(c) # Convert to python string, to be safe\nfree(c) # Free up the allocated memory, to be safe (let python handle ret via garbage collection)\n\n# *** How to pass variable to a void func(double &var); ***\n#Pass by reference is EASY! So easy that it isn't trivial to figure out!\n# Define the class like normal:\ncdef extern from \"mylib.h\" namespace \"mylib\":\n    void func(double) # No special characters needed, just like normal c++!\n#to use it:\ndouble d=0 # Creation of double datatype\nfunc(d) # Call funcd pass-by-reference\nprint d # Could print anything that func set d to!\n\n# *** Notes on <vector> and <bitset> - they might work? ***\n#cdef extern from \"<vector>\" namespace \"std\":\n#    cdef cppclass vector[T]:\n#        pass\n#cdef extern from \"<bitset>\" namespace \"std\":\n#    cdef cppclass bitset[T]:\n#        pass\n\n\n";
static char __pyx_k_8[] = "pyautomata.init_seed (line 196)";
static char __pyx_k_9[] = "pyautomata.iterateAutomata (line 303)";
static char __pyx_k_10[] = "pyautomata.printBuffer (line 312)";
static char __pyx_k_11[] = "pyautomata.fillBuffer (line 320)";
static char __pyx_k_12[] = "pyautomata.currentGenerationIndex (line 336)";
static char __pyx_k_13[] = "pyautomata.__repr__ (line 343)";
static char __pyx_k_14[] = "pyautomata.bStringFromCurrentGeneration (line 351)";
static char __pyx_k_15[] = "pyautomata.stringFromCurrentGeneration (line 374)";
static char __pyx_k_16[] = "pyautomata.chunks_FromCurrentGeneration (line 389)";
static char __pyx_k__bits[] = "bits";
static char __pyx_k__size[] = "size";
static char __pyx_k__c_str[] = "c_str";
static char __pyx_k__range[] = "range";
static char __pyx_k__p_rule[] = "p_rule";
static char __pyx_k__thisptr[] = "thisptr";
static char __pyx_k____main__[] = "__main__";
static char __pyx_k____repr__[] = "__repr__";
static char __pyx_k____test__[] = "__test__";
static char __pyx_k__init_seed[] = "init_seed";
static char __pyx_k__fillBuffer[] = "fillBuffer";
static char __pyx_k__pyautomata[] = "pyautomata";
static char __pyx_k__printBuffer[] = "printBuffer";
static char __pyx_k__updateParams[] = "updateParams";
static char __pyx_k___overallIndex[] = "_overallIndex";
static char __pyx_k__p_seedIsRandom[] = "p_seedIsRandom";
static char __pyx_k__iterateAutomata[] = "iterateAutomata";
static char __pyx_k__p_generationLength[] = "p_generationLength";
static PyObject *__pyx_n_s_1;
static PyObject *__pyx_kp_u_10;
static PyObject *__pyx_kp_u_11;
static PyObject *__pyx_kp_u_12;
static PyObject *__pyx_kp_u_13;
static PyObject *__pyx_kp_u_14;
static PyObject *__pyx_kp_u_15;
static PyObject *__pyx_kp_u_16;
static PyObject *__pyx_n_s_2;
static PyObject *__pyx_kp_s_3;
static PyObject *__pyx_n_s_4;
static PyObject *__pyx_n_s_5;
static PyObject *__pyx_n_s_6;
static PyObject *__pyx_kp_u_8;
static PyObject *__pyx_kp_u_9;
static PyObject *__pyx_n_s____main__;
static PyObject *__pyx_n_s____repr__;
static PyObject *__pyx_n_s____test__;
static PyObject *__pyx_n_s___overallIndex;
static PyObject *__pyx_n_s__bits;
static PyObject *__pyx_n_s__c_str;
static PyObject *__pyx_n_s__fillBuffer;
static PyObject *__pyx_n_s__init_seed;
static PyObject *__pyx_n_s__iterateAutomata;
static PyObject *__pyx_n_s__p_generationLength;
static PyObject *__pyx_n_s__p_rule;
static PyObject *__pyx_n_s__p_seedIsRandom;
static PyObject *__pyx_n_s__printBuffer;
static PyObject *__pyx_n_s__pyautomata;
static PyObject *__pyx_n_s__range;
static PyObject *__pyx_n_s__size;
static PyObject *__pyx_n_s__thisptr;
static PyObject *__pyx_n_s__updateParams;
static PyObject *__pyx_int_0;

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":161
 *     that outside *this* object, nothing can modify the variable
 *     '''
 *     cdef readonly unsigned int p_rule, p_seedIsRandom, p_seedStartingPosition, p_generationLength             # <<<<<<<<<<<<<<
 *     cdef public _overallIndex
 *     cdef Automata *thisptr
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_6p_rule___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_6p_rule___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->p_rule); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.p_rule.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_14p_seedIsRandom___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_14p_seedIsRandom___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->p_seedIsRandom); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.p_seedIsRandom.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_22p_seedStartingPosition___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_22p_seedStartingPosition___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->p_seedStartingPosition); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.p_seedStartingPosition.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_18p_generationLength___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_18p_generationLength___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyLong_FromUnsignedLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->p_generationLength); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.p_generationLength.__get__");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":162
 *     '''
 *     cdef readonly unsigned int p_rule, p_seedIsRandom, p_seedStartingPosition, p_generationLength
 *     cdef public _overallIndex             # <<<<<<<<<<<<<<
 *     cdef Automata *thisptr
 *     def __cinit__(self, *args):
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__get__");
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __pyx_r = ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__set__");
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  __Pyx_GOTREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __Pyx_DECREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex = __pyx_v_value;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___del__(PyObject *__pyx_v_self); /*proto*/
static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___del__(PyObject *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannySetupContext("__del__");
  __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(Py_None);
  __Pyx_GOTREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __Pyx_DECREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex = Py_None;

  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":164
 *     cdef public _overallIndex
 *     cdef Automata *thisptr
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         '''
 *             Constructor
 */

static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  unsigned int __pyx_t_4;
  unsigned int __pyx_t_5;
  __Pyx_RefNannySetupContext("__cinit__");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":176
 *              unsigned int generationLength = kAutomataGenerationLength);
 *         '''
 *         if len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Automata()
 *         elif len(args) == 1:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":177
 *         '''
 *         if len(args) == 0:
 *             self.thisptr = new Automata()             # <<<<<<<<<<<<<<
 *         elif len(args) == 1:
 *             self.thisptr = new Automata(<unsigned int>args[0])
 */
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr = new Automata::Automata();
    goto __pyx_L5;
  }

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":178
 *         if len(args) == 0:
 *             self.thisptr = new Automata()
 *         elif len(args) == 1:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Automata(<unsigned int>args[0])
 *         elif len(args) == 2:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":179
 *             self.thisptr = new Automata()
 *         elif len(args) == 1:
 *             self.thisptr = new Automata(<unsigned int>args[0])             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             self.thisptr = new Automata(<unsigned int>args[0], <unsigned int>args[1])
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr = new Automata::Automata(__pyx_t_4);
    goto __pyx_L5;
  }

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":180
 *         elif len(args) == 1:
 *             self.thisptr = new Automata(<unsigned int>args[0])
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr = new Automata(<unsigned int>args[0], <unsigned int>args[1])
 * #        elif len(args) == 3:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 2);
  if (__pyx_t_2) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":181
 *             self.thisptr = new Automata(<unsigned int>args[0])
 *         elif len(args) == 2:
 *             self.thisptr = new Automata(<unsigned int>args[0], <unsigned int>args[1])             # <<<<<<<<<<<<<<
 * #        elif len(args) == 3:
 * #            self.thisptr = new Automata(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2])
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_3); if (unlikely((__pyx_t_4 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_3); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr = new Automata::Automata(__pyx_t_4, __pyx_t_5);
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":187
 * #            self.thisptr = new Automata(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2], <unsigned int>args[3])
 *         # Set parameters - readonly from outside this C++ object.
 *         self._overallIndex = 0             # <<<<<<<<<<<<<<
 *         self.updateParams()
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_GOTREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __Pyx_DECREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex = __pyx_int_0;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":188
 *         # Set parameters - readonly from outside this C++ object.
 *         self._overallIndex = 0
 *         self.updateParams()             # <<<<<<<<<<<<<<
 * 
 *     cdef updateParams(self):
 */
  __pyx_t_3 = ((struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata *)((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->__pyx_vtab)->updateParams(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.__cinit__");
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":190
 *         self.updateParams()
 * 
 *     cdef updateParams(self):             # <<<<<<<<<<<<<<
 *         self.p_rule = self.thisptr.p_rule
 *         self.p_seedIsRandom = self.thisptr.p_seedIsRandom
 */

static  PyObject *__pyx_f_10PyAutomata_10pyAutomata_10pyautomata_updateParams(struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("updateParams");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":191
 * 
 *     cdef updateParams(self):
 *         self.p_rule = self.thisptr.p_rule             # <<<<<<<<<<<<<<
 *         self.p_seedIsRandom = self.thisptr.p_seedIsRandom
 *         self.p_seedStartingPosition = self.thisptr.p_seedStartingPosition
 */
  __pyx_v_self->p_rule = __pyx_v_self->thisptr->p_rule;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":192
 *     cdef updateParams(self):
 *         self.p_rule = self.thisptr.p_rule
 *         self.p_seedIsRandom = self.thisptr.p_seedIsRandom             # <<<<<<<<<<<<<<
 *         self.p_seedStartingPosition = self.thisptr.p_seedStartingPosition
 *         self.p_generationLength = self.thisptr.p_generationLength
 */
  __pyx_v_self->p_seedIsRandom = __pyx_v_self->thisptr->p_seedIsRandom;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":193
 *         self.p_rule = self.thisptr.p_rule
 *         self.p_seedIsRandom = self.thisptr.p_seedIsRandom
 *         self.p_seedStartingPosition = self.thisptr.p_seedStartingPosition             # <<<<<<<<<<<<<<
 *         self.p_generationLength = self.thisptr.p_generationLength
 * 
 */
  __pyx_v_self->p_seedStartingPosition = __pyx_v_self->thisptr->p_seedStartingPosition;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":194
 *         self.p_seedIsRandom = self.thisptr.p_seedIsRandom
 *         self.p_seedStartingPosition = self.thisptr.p_seedStartingPosition
 *         self.p_generationLength = self.thisptr.p_generationLength             # <<<<<<<<<<<<<<
 * 
 *     def init_seed(self, *args):
 */
  __pyx_v_self->p_generationLength = __pyx_v_self->thisptr->p_generationLength;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":196
 *         self.p_generationLength = self.thisptr.p_generationLength
 * 
 *     def init_seed(self, *args):             # <<<<<<<<<<<<<<
 *         '''
 *             Initialize (seed) the cellular automata. Call this immediately after
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_init_seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_init_seed[] = "\n            Initialize (seed) the cellular automata. Call this immediately after\n            the creation of an organism. init_seed() is called upon organism \n            creation, so only call this if you aren't satisfied with the default\n            impulse (single cell on in the middle of the vector).\n            \n            NOTE: even though the data types can handle 32-bit values, we force\n            each seed into 16-bit values so that it is easier to handle.\n            \n            init_seed(mode, position, value)\n            init_seed(values[])\n            \n            If you use the first method:\n            mode 0 (position and value ignored): center impulse\n                In mode 0, regardless of the values of position and value, the\n                cellular automata is initialized with a single 1 (impulse) in \n                the center cell of the vector in a sea of 0s.\n                ca.init_seed()\n                ca.init_seed(0)\n                \n            mode 1 (position and value ignored): 50% density random seed\n                In mode 1, regardless of the values of position and value, the \n                cellular automata is initialized to a random seed. Every cell has\n                a 50% chance of being a 1 or 0, which means this is an even \n                density random seed. Future modes may compensate for normal \n                random density or similar\n                ca.init_seed(1)\n                \n            mode 2 (position, value provided): Seed with value @ position\n                In mode 2, the binary representation of the integer passed as \n                the second paramter is packed into the cellular automata array \n                with the left most bit being located at the index specified in\n                the first argument, <position>\n                ca.init_seed(2, 255, 50)\n                \n            special mode (values[])\n            This special call is accessed by passi""ng into init_seed a list or\n            tuple of integers. The binary representation of these integers are\n            set into the cellular automata, starting at the left side of the \n            vector. The binary bits are packed from left to right until either \n            there are no more bits, or the end of the CA vector is reached. If \n            the end of the CA vector is reached, the rest of the bits are simply\n            truncated.\n            \n            Future versions may support a second position to indicate whether to\n            left, center, or right-justify the starting values. \n            \n            *** Documentation for future reference regarding \n                                                    how args are handled: ***\n            # args\n            0       ca.init_seed() (default params)\n            1       if the arg is a list or tuple: ca.init_seed(arg[], len(arg))\n            1       if not list or tuple: init_seed(arg) (default param2 and param3)\n            2       ca.init_seed(arg1, arg2) (default arg3)\n            3       ca.init_seed(arg1, arg2, arg3) (no default params)\n            \n            use like this:\n            init_seed():    seed with impulse in center\n            init_seed(0):   seed with impulse in center\n            init_seed(1):   seed with random, 50% density\n            init_seed(1,2): seed with random, 50% density (param2 is ignored)\n            init_seed(2,500,50):  seed with the value 500 at position 50\n            \n            and a special call with a list:\n            each value in the list is currently limited to 8-bits (0-255). In \n            reality the container can store up to 32-bits, so change Automata.h\n            if you want to use larger seed values.\n            (255,255,255,255) with 8-bits is equivalent to (65535,65535) with 16-bits\n            make sense?\n            init_seed((10, 50, 100, 255)): seed the ca with the the binary\n                    vers""ion of 10, 50, 100, and 255 packed into the vector\n                    starting from the left of the cell. If these values over\n                    run the vector, the bits will simply be truncated. Also if \n                    your integer is too large, only the first 8 bits will be \n                    accepted (if BITS_PER_SEED_VALUE in Automata.h is set up \n                    for 8-bits)\n                    \n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_init_seed(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  unsigned int __pyx_v_n;
  unsigned int *__pyx_v_p1;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned int __pyx_t_8;
  unsigned int __pyx_t_9;
  unsigned int __pyx_t_10;
  __Pyx_RefNannySetupContext("init_seed");
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "init_seed", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":277
 *         cdef unsigned int n
 *         cdef unsigned int *p1
 *         if len(args) == 0:             # <<<<<<<<<<<<<<
 *             self.thisptr.init_seed()
 *         if len(args) == 1:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 0);
  if (__pyx_t_2) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":278
 *         cdef unsigned int *p1
 *         if len(args) == 0:
 *             self.thisptr.init_seed()             # <<<<<<<<<<<<<<
 *         if len(args) == 1:
 *             if isinstance(args[0], list) or isinstance(args[0], tuple):
 */
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->init_seed();
    goto __pyx_L5;
  }
  __pyx_L5:;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":279
 *         if len(args) == 0:
 *             self.thisptr.init_seed()
 *         if len(args) == 1:             # <<<<<<<<<<<<<<
 *             if isinstance(args[0], list) or isinstance(args[0], tuple):
 *                 n = len(args[0])
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_2 = (__pyx_t_1 == 1);
  if (__pyx_t_2) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":280
 *             self.thisptr.init_seed()
 *         if len(args) == 1:
 *             if isinstance(args[0], list) or isinstance(args[0], tuple):             # <<<<<<<<<<<<<<
 *                 n = len(args[0])
 *                 p1 = <unsigned int *>malloc(sizeof(unsigned int)*n)
 */
    __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_Check(__pyx_t_3); 
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_2) {
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_Check(__pyx_t_3); 
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_5 = __pyx_t_4;
    } else {
      __pyx_t_5 = __pyx_t_2;
    }
    if (__pyx_t_5) {

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":281
 *         if len(args) == 1:
 *             if isinstance(args[0], list) or isinstance(args[0], tuple):
 *                 n = len(args[0])             # <<<<<<<<<<<<<<
 *                 p1 = <unsigned int *>malloc(sizeof(unsigned int)*n)
 *                 for i in range(len(args[0])):
 */
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 281; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_v_n = __pyx_t_1;

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":282
 *             if isinstance(args[0], list) or isinstance(args[0], tuple):
 *                 n = len(args[0])
 *                 p1 = <unsigned int *>malloc(sizeof(unsigned int)*n)             # <<<<<<<<<<<<<<
 *                 for i in range(len(args[0])):
 *                     p1[i] = args[0][i]
 */
      __pyx_v_p1 = ((unsigned int *)malloc(((sizeof(unsigned int)) * __pyx_v_n)));

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":283
 *                 n = len(args[0])
 *                 p1 = <unsigned int *>malloc(sizeof(unsigned int)*n)
 *                 for i in range(len(args[0])):             # <<<<<<<<<<<<<<
 *                     p1[i] = args[0][i]
 * 
 */
      __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_1; __pyx_t_6+=1) {
        __pyx_v_i = __pyx_t_6;

        /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":284
 *                 p1 = <unsigned int *>malloc(sizeof(unsigned int)*n)
 *                 for i in range(len(args[0])):
 *                     p1[i] = args[0][i]             # <<<<<<<<<<<<<<
 * 
 *                 self.thisptr.init_seed(p1, n)
 */
        __pyx_t_3 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_3) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_3, __pyx_v_i, sizeof(Py_ssize_t), PyInt_FromSsize_t); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_8 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        (__pyx_v_p1[__pyx_v_i]) = __pyx_t_8;
      }

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":286
 *                     p1[i] = args[0][i]
 * 
 *                 self.thisptr.init_seed(p1, n)             # <<<<<<<<<<<<<<
 *                 free(p1)
 *             else:
 */
      ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->init_seed(__pyx_v_p1, __pyx_v_n);

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":287
 * 
 *                 self.thisptr.init_seed(p1, n)
 *                 free(p1)             # <<<<<<<<<<<<<<
 *             else:
 *                 self.thisptr.init_seed(<unsigned int>args[0])
 */
      free(__pyx_v_p1);
      goto __pyx_L7;
    }
    /*else*/ {

      /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":289
 *                 free(p1)
 *             else:
 *                 self.thisptr.init_seed(<unsigned int>args[0])             # <<<<<<<<<<<<<<
 *         elif len(args) == 2:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1])
 */
      __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->init_seed(__pyx_t_8);
    }
    __pyx_L7:;
    goto __pyx_L6;
  }

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":290
 *             else:
 *                 self.thisptr.init_seed(<unsigned int>args[0])
 *         elif len(args) == 2:             # <<<<<<<<<<<<<<
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1])
 *         elif len(args) == 3:
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_5 = (__pyx_t_1 == 2);
  if (__pyx_t_5) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":291
 *                 self.thisptr.init_seed(<unsigned int>args[0])
 *         elif len(args) == 2:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1])             # <<<<<<<<<<<<<<
 *         elif len(args) == 3:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2])
 */
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 291; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->init_seed(__pyx_t_8, __pyx_t_9);
    goto __pyx_L6;
  }

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":292
 *         elif len(args) == 2:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1])
 *         elif len(args) == 3:             # <<<<<<<<<<<<<<
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2])
 *         self.updateParams()
 */
  if (unlikely(__pyx_v_args == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 292; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
  }
  __pyx_t_1 = PyTuple_GET_SIZE(((PyObject *)__pyx_v_args)); 
  __pyx_t_5 = (__pyx_t_1 == 3);
  if (__pyx_t_5) {

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":293
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1])
 *         elif len(args) == 3:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2])             # <<<<<<<<<<<<<<
 *         self.updateParams()
 * 
 */
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 0, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 1, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_8 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_GetItemInt_Tuple(((PyObject *)__pyx_v_args), 2, sizeof(long), PyInt_FromLong); if (!__pyx_t_7) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_10 = __Pyx_PyInt_AsUnsignedInt(__pyx_t_7); if (unlikely((__pyx_t_10 == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 293; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->init_seed(__pyx_t_9, __pyx_t_8, __pyx_t_10);
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":294
 *         elif len(args) == 3:
 *             self.thisptr.init_seed(<unsigned int>args[0], <unsigned int>args[1], <unsigned int>args[2])
 *         self.updateParams()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata *)((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->__pyx_vtab)->updateParams(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.init_seed");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_args);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":296
 *         self.updateParams()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         '''
 *             c++ destructor.  Delete the automata and any other memory objects
 */

static void __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannySetupContext("__dealloc__");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":301
 *             that may be floating around
 *         '''
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def iterateAutomata(self):
 */
  delete ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr;

  __Pyx_RefNannyFinishContext();
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":303
 *         del self.thisptr
 * 
 *     def iterateAutomata(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Execute a single iteration of the cellular automata.  Creates a new
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_iterateAutomata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_iterateAutomata[] = "\n            Execute a single iteration of the cellular automata.  Creates a new\n            current \"generation\".\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_iterateAutomata(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("iterateAutomata");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":309
 *         '''
 *         #self._overallIndex += 1
 *         self.thisptr.iterateAutomata()             # <<<<<<<<<<<<<<
 *         self._overallIndex = self.thisptr._overallIndex
 * 
 */
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->iterateAutomata();

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":310
 *         #self._overallIndex += 1
 *         self.thisptr.iterateAutomata()
 *         self._overallIndex = self.thisptr._overallIndex             # <<<<<<<<<<<<<<
 * 
 *     def printBuffer(self):
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->_overallIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __Pyx_DECREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex = __pyx_t_1;
  __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.iterateAutomata");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":312
 *         self._overallIndex = self.thisptr._overallIndex
 * 
 *     def printBuffer(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Prints the "buffer".  The buffer is basically the history of all
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_printBuffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_printBuffer[] = "    \n            Prints the \"buffer\".  The buffer is basically the history of all\n            generations thus far computed, with a maximum of <kAutomataGenerations>\n            in Automata.h\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_printBuffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("printBuffer");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":318
 *             in Automata.h
 *         '''
 *         self.thisptr.printBuffer()             # <<<<<<<<<<<<<<
 * 
 *     def fillBuffer(self):
 */
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->printBuffer();

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":320
 *         self.thisptr.printBuffer()
 * 
 *     def fillBuffer(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Executes iterateAutomata() <kAutomataGenerations> times.  If the number
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_fillBuffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_fillBuffer[] = "\n            Executes iterateAutomata() <kAutomataGenerations> times.  If the number\n            of generations is > kAutomataGenerations, I believe the buffer pointer\n            is reset back into the beginning of the buffer (and execution is skipped).\n            \n            Internally to the ca there is a 2-D buffer that holds a history of \n            the generations. If it is 100 rows long, it holds 100 generations of\n            \"history\". When the 101st generation is executed, the pointer wraps\n            around and the 101st generation is stored in buffer[0], overwriting\n            the 1st generation. fillBuffer() simply executes the cellular automata\n            enough times to fill up the buffer. \n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_fillBuffer(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("fillBuffer");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":333
 *             enough times to fill up the buffer.
 *         '''
 *         self.thisptr.fillBuffer()             # <<<<<<<<<<<<<<
 *         self._overallIndex = self.thisptr._overallIndex
 * 
 */
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->fillBuffer();

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":334
 *         '''
 *         self.thisptr.fillBuffer()
 *         self._overallIndex = self.thisptr._overallIndex             # <<<<<<<<<<<<<<
 * 
 *     def currentGenerationIndex(self):
 */
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->_overallIndex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 334; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  __Pyx_DECREF(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex);
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->_overallIndex = __pyx_t_1;
  __pyx_t_1 = 0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.fillBuffer");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":336
 *         self._overallIndex = self.thisptr._overallIndex
 * 
 *     def currentGenerationIndex(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Returns the integer of the current generation index.
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_currentGenerationIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_currentGenerationIndex[] = "\n            Returns the integer of the current generation index.\n            Will be 0 < index < kAutomataGenerations\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_currentGenerationIndex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("currentGenerationIndex");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":341
 *             Will be 0 < index < kAutomataGenerations
 *         '''
 *         return self.thisptr.currentGenerationIndex()             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->currentGenerationIndex()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.currentGenerationIndex");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":343
 *         return self.thisptr.currentGenerationIndex()
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Python Display Functin
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___repr__(PyObject *__pyx_v_self); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata___repr__[] = "\n            Python Display Functin\n        ";
struct wrapperbase __pyx_wrapperbase_10PyAutomata_10pyAutomata_10pyautomata___repr__;
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannySetupContext("__repr__");

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":348
 *         '''
 * 
 *         self.thisptr.printBuffer()             # <<<<<<<<<<<<<<
 *         return ''
 * 
 */
  ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->printBuffer();

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":349
 * 
 *         self.thisptr.printBuffer()
 *         return ''             # <<<<<<<<<<<<<<
 * 
 *     def bStringFromCurrentGeneration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_kp_s_3));
  __pyx_r = ((PyObject *)__pyx_kp_s_3);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":351
 *         return ''
 * 
 *     def bStringFromCurrentGeneration(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Returns the string representation of the binary values of the current
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_bStringFromCurrentGeneration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_bStringFromCurrentGeneration[] = "\n            Returns the string representation of the binary values of the current\n            generation.  Basically each 0 is converted to an ascii '0', and each \n            binary 1 is converted to an ascii '1'.  Could be used, for example, \n            to dump ascii binary data to stdout for processing\n        \n            a good \"last resort\", guaranteed way of accessing computed data\n            \n            returns something like '0011010100100100111'\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_bStringFromCurrentGeneration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v_str1;
  char *__pyx_v_cstr;
  PyObject *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("bStringFromCurrentGeneration");
  __pyx_v_s = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":362
 *             returns something like '0011010100100100111'
 *         '''
 *         cdef string str1 = self.thisptr.bStringFromCurrentGeneration()             # <<<<<<<<<<<<<<
 *         #print str[0]
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 */
  __pyx_v_str1 = ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->bStringFromCurrentGeneration();

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":364
 *         cdef string str1 = self.thisptr.bStringFromCurrentGeneration()
 *         #print str[0]
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)             # <<<<<<<<<<<<<<
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)
 */
  __pyx_v_cstr = ((char *)malloc((__pyx_v_str1.size() + 1)));

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":365
 *         #print str[0]
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 *         strcpy(cstr, str1.c_str())             # <<<<<<<<<<<<<<
 *         s = str(cstr)
 *         free(cstr)
 */
  strcpy(__pyx_v_cstr, __pyx_v_str1.c_str());

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":366
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)             # <<<<<<<<<<<<<<
 *         free(cstr)
 *         # I feel unsafe simply returning a malloc'd cstr, so copy to str
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_cstr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_s);
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":367
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)
 *         free(cstr)             # <<<<<<<<<<<<<<
 *         # I feel unsafe simply returning a malloc'd cstr, so copy to str
 *         #    and free it up.  kind of redundant, oh well. Let python handle
 */
  free(__pyx_v_cstr);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":372
 *         #    the garbage collection and let me handle explicitely "free"ing the
 *         #    sucker.
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def stringFromCurrentGeneration(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.bStringFromCurrentGeneration");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":374
 *         return s
 * 
 *     def stringFromCurrentGeneration(self):             # <<<<<<<<<<<<<<
 *         '''
 *             Returns the string representation of the current generation, with the
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_stringFromCurrentGeneration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_stringFromCurrentGeneration[] = "\n            Returns the string representation of the current generation, with the \n            characters defined in Automata.h\n            \n            return something like:\n            '   #     ###      # ##       '\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_stringFromCurrentGeneration(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  std::string __pyx_v_str1;
  char *__pyx_v_cstr;
  PyObject *__pyx_v_s;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("stringFromCurrentGeneration");
  __pyx_v_s = Py_None; __Pyx_INCREF(Py_None);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":382
 *             '   #     ###      # ##       '
 *         '''
 *         cdef string str1 = self.thisptr.stringFromCurrentGeneration()             # <<<<<<<<<<<<<<
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 *         strcpy(cstr, str1.c_str())
 */
  __pyx_v_str1 = ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->stringFromCurrentGeneration();

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":383
 *         '''
 *         cdef string str1 = self.thisptr.stringFromCurrentGeneration()
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)             # <<<<<<<<<<<<<<
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)
 */
  __pyx_v_cstr = ((char *)malloc((__pyx_v_str1.size() + 1)));

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":384
 *         cdef string str1 = self.thisptr.stringFromCurrentGeneration()
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 *         strcpy(cstr, str1.c_str())             # <<<<<<<<<<<<<<
 *         s = str(cstr)
 *         free(cstr)
 */
  strcpy(__pyx_v_cstr, __pyx_v_str1.c_str());

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":385
 *         cdef char *cstr = <char*>malloc(str1.size() + 1)
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)             # <<<<<<<<<<<<<<
 *         free(cstr)
 *         return s
 */
  __pyx_t_1 = PyBytes_FromString(__pyx_v_cstr); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_t_1));
  __Pyx_GIVEREF(((PyObject *)__pyx_t_1));
  __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_v_s);
  __pyx_v_s = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":386
 *         strcpy(cstr, str1.c_str())
 *         s = str(cstr)
 *         free(cstr)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  free(__pyx_v_cstr);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":387
 *         s = str(cstr)
 *         free(cstr)
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def chunks_FromCurrentGeneration(self,unsigned int bits=8):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_s);
  __pyx_r = __pyx_v_s;
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.stringFromCurrentGeneration");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":389
 *         return s
 * 
 *     def chunks_FromCurrentGeneration(self,unsigned int bits=8):             # <<<<<<<<<<<<<<
 *         '''
 *             Returns the unsigned byte representation of the current generation
 */

static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_chunks_FromCurrentGeneration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_chunks_FromCurrentGeneration[] = "\n            Returns the unsigned byte representation of the current generation\n            \n            returns something like:\n            [455, 642, 325, 32]\n        ";
static PyObject *__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_chunks_FromCurrentGeneration(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  unsigned int __pyx_v_bits;
  unsigned long *__pyx_v_c;
  unsigned int __pyx_v_n;
  PyObject *__pyx_v_l;
  unsigned int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  unsigned int __pyx_t_2;
  unsigned int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  static PyObject **__pyx_pyargnames[] = {&__pyx_n_s__bits,0};
  __Pyx_RefNannySetupContext("chunks_FromCurrentGeneration");
  if (unlikely(__pyx_kwds)) {
    Py_ssize_t kw_args = PyDict_Size(__pyx_kwds);
    PyObject* values[1] = {0};
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  0:
      if (kw_args > 0) {
        PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s__bits);
        if (value) { values[0] = value; kw_args--; }
      }
    }
    if (unlikely(kw_args > 0)) {
      if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, PyTuple_GET_SIZE(__pyx_args), "chunks_FromCurrentGeneration") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    if (values[0]) {
      __pyx_v_bits = __Pyx_PyInt_AsUnsignedInt(values[0]); if (unlikely((__pyx_v_bits == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_bits = ((unsigned int)8);
    }
  } else {
    __pyx_v_bits = ((unsigned int)8);
    switch (PyTuple_GET_SIZE(__pyx_args)) {
      case  1: __pyx_v_bits = __Pyx_PyInt_AsUnsignedInt(PyTuple_GET_ITEM(__pyx_args, 0)); if (unlikely((__pyx_v_bits == (unsigned int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      case  0: break;
      default: goto __pyx_L5_argtuple_error;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("chunks_FromCurrentGeneration", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.chunks_FromCurrentGeneration");
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_v_l = ((PyObject *)Py_None); __Pyx_INCREF(Py_None);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":398
 *         cdef unsigned long *c
 *         cdef unsigned int n
 *         c = self.thisptr.chunks_FromCurrentGeneration(n,bits)             # <<<<<<<<<<<<<<
 * 
 *         # Convert to list
 */
  __pyx_v_c = ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)__pyx_v_self)->thisptr->chunks_FromCurrentGeneration(__pyx_v_n, __pyx_v_bits);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":401
 * 
 *         # Convert to list
 *         l=[]             # <<<<<<<<<<<<<<
 *         #a=PyLong_FromUnsignedLong(c[0]))
 *         for i in range(n):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 401; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __Pyx_DECREF(((PyObject *)__pyx_v_l));
  __pyx_v_l = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":403
 *         l=[]
 *         #a=PyLong_FromUnsignedLong(c[0]))
 *         for i in range(n):             # <<<<<<<<<<<<<<
 *             l.append(long(c[i]))
 *         free(c)
 */
  __pyx_t_2 = __pyx_v_n;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":404
 *         #a=PyLong_FromUnsignedLong(c[0]))
 *         for i in range(n):
 *             l.append(long(c[i]))             # <<<<<<<<<<<<<<
 *         free(c)
 *         return l
 */
    if (unlikely(__pyx_v_l == Py_None)) {
      PyErr_SetString(PyExc_AttributeError, "'NoneType' object has no attribute 'append'"); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;} 
    }
    __pyx_t_1 = PyLong_FromUnsignedLong((__pyx_v_c[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_Call(((PyObject *)((PyObject*)&PyLong_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = PyList_Append(((PyObject *)__pyx_v_l), __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":405
 *         for i in range(n):
 *             l.append(long(c[i]))
 *         free(c)             # <<<<<<<<<<<<<<
 *         return l
 * 
 */
  free(__pyx_v_c);

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":406
 *             l.append(long(c[i]))
 *         free(c)
 *         return l             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_l));
  __pyx_r = ((PyObject *)__pyx_v_l);
  goto __pyx_L0;

  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("PyAutomata.pyAutomata.pyautomata.chunks_FromCurrentGeneration");
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(__pyx_v_l);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_10PyAutomata_10pyAutomata_pyautomata __pyx_vtable_10PyAutomata_10pyAutomata_pyautomata;

static PyObject *__pyx_tp_new_10PyAutomata_10pyAutomata_pyautomata(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *p;
  PyObject *o = (*t->tp_alloc)(t, 0);
  if (!o) return 0;
  p = ((struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)o);
  p->__pyx_vtab = __pyx_vtabptr_10PyAutomata_10pyAutomata_pyautomata;
  p->_overallIndex = Py_None; Py_INCREF(Py_None);
  if (__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___cinit__(o, a, k) < 0) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_10PyAutomata_10pyAutomata_pyautomata(PyObject *o) {
  struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *p = (struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)o;
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___dealloc__(o);
    if (PyErr_Occurred()) PyErr_WriteUnraisable(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  Py_XDECREF(p->_overallIndex);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_10PyAutomata_10pyAutomata_pyautomata(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *p = (struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)o;
  if (p->_overallIndex) {
    e = (*v)(p->_overallIndex, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_10PyAutomata_10pyAutomata_pyautomata(PyObject *o) {
  struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *p = (struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *)o;
  PyObject* tmp;
  tmp = ((PyObject*)p->_overallIndex);
  p->_overallIndex = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_rule(PyObject *o, void *x) {
  return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_6p_rule___get__(o);
}

static PyObject *__pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_seedIsRandom(PyObject *o, void *x) {
  return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_14p_seedIsRandom___get__(o);
}

static PyObject *__pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_seedStartingPosition(PyObject *o, void *x) {
  return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_22p_seedStartingPosition___get__(o);
}

static PyObject *__pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_generationLength(PyObject *o, void *x) {
  return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_18p_generationLength___get__(o);
}

static PyObject *__pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata__overallIndex(PyObject *o, void *x) {
  return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___get__(o);
}

static int __pyx_setprop_10PyAutomata_10pyAutomata_10pyautomata__overallIndex(PyObject *o, PyObject *v, void *x) {
  if (v) {
    return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___set__(o, v);
  }
  else {
    return __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_13_overallIndex___del__(o);
  }
}

static PyMethodDef __pyx_methods_10PyAutomata_10pyAutomata_pyautomata[] = {
  {__Pyx_NAMESTR("init_seed"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_init_seed, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_init_seed)},
  {__Pyx_NAMESTR("iterateAutomata"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_iterateAutomata, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_iterateAutomata)},
  {__Pyx_NAMESTR("printBuffer"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_printBuffer, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_printBuffer)},
  {__Pyx_NAMESTR("fillBuffer"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_fillBuffer, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_fillBuffer)},
  {__Pyx_NAMESTR("currentGenerationIndex"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_currentGenerationIndex, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_currentGenerationIndex)},
  {__Pyx_NAMESTR("bStringFromCurrentGeneration"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_bStringFromCurrentGeneration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_bStringFromCurrentGeneration)},
  {__Pyx_NAMESTR("stringFromCurrentGeneration"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_stringFromCurrentGeneration, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_stringFromCurrentGeneration)},
  {__Pyx_NAMESTR("chunks_FromCurrentGeneration"), (PyCFunction)__pyx_pf_10PyAutomata_10pyAutomata_10pyautomata_chunks_FromCurrentGeneration, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_10PyAutomata_10pyAutomata_10pyautomata_chunks_FromCurrentGeneration)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_10PyAutomata_10pyAutomata_pyautomata[] = {
  {(char *)"p_rule", __pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_rule, 0, 0, 0},
  {(char *)"p_seedIsRandom", __pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_seedIsRandom, 0, 0, 0},
  {(char *)"p_seedStartingPosition", __pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_seedStartingPosition, 0, 0, 0},
  {(char *)"p_generationLength", __pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata_p_generationLength, 0, 0, 0},
  {(char *)"_overallIndex", __pyx_getprop_10PyAutomata_10pyAutomata_10pyautomata__overallIndex, __pyx_setprop_10PyAutomata_10pyAutomata_10pyautomata__overallIndex, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_pyautomata = {
  0, /*nb_add*/
  0, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  0, /*nb_and*/
  0, /*nb_xor*/
  0, /*nb_or*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  #if PY_VERSION_HEX >= 0x02050000
  0, /*nb_index*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_pyautomata = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_pyautomata = {
  0, /*mp_length*/
  0, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyBufferProcs __pyx_tp_as_buffer_pyautomata = {
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getreadbuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getwritebuffer*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getsegcount*/
  #endif
  #if PY_MAJOR_VERSION < 3
  0, /*bf_getcharbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_getbuffer*/
  #endif
  #if PY_VERSION_HEX >= 0x02060000
  0, /*bf_releasebuffer*/
  #endif
};

PyTypeObject __pyx_type_10PyAutomata_10pyAutomata_pyautomata = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("PyAutomata.pyAutomata.pyautomata"), /*tp_name*/
  sizeof(struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_10PyAutomata_10pyAutomata_pyautomata, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  __pyx_pf_10PyAutomata_10pyAutomata_10pyautomata___repr__, /*tp_repr*/
  &__pyx_tp_as_number_pyautomata, /*tp_as_number*/
  &__pyx_tp_as_sequence_pyautomata, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_pyautomata, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  &__pyx_tp_as_buffer_pyautomata, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("\n    The goal of this class is to expose the c++ library.  It is NOT, I repeat, NOT \n    meant to add new functionality.  If Automata:: needs new functions, freakin' put \n    it in the c++ class! :) -BB\n    \n    In order for this class to be able to say:\n        self.p_rule = self.thisptr.p_rule\n    define self.p_rule here with a cdef public / readonly statement. readonly means\n    that outside *this* object, nothing can modify the variable\n    "), /*tp_doc*/
  __pyx_tp_traverse_10PyAutomata_10pyAutomata_pyautomata, /*tp_traverse*/
  __pyx_tp_clear_10PyAutomata_10pyAutomata_pyautomata, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_10PyAutomata_10pyAutomata_pyautomata, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_10PyAutomata_10pyAutomata_pyautomata, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_10PyAutomata_10pyAutomata_pyautomata, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
    PyModuleDef_HEAD_INIT,
    __Pyx_NAMESTR("pyAutomata"),
    __Pyx_DOCSTR(__pyx_k_7), /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 1, 1},
  {&__pyx_kp_u_10, __pyx_k_10, sizeof(__pyx_k_10), 0, 1, 0, 0},
  {&__pyx_kp_u_11, __pyx_k_11, sizeof(__pyx_k_11), 0, 1, 0, 0},
  {&__pyx_kp_u_12, __pyx_k_12, sizeof(__pyx_k_12), 0, 1, 0, 0},
  {&__pyx_kp_u_13, __pyx_k_13, sizeof(__pyx_k_13), 0, 1, 0, 0},
  {&__pyx_kp_u_14, __pyx_k_14, sizeof(__pyx_k_14), 0, 1, 0, 0},
  {&__pyx_kp_u_15, __pyx_k_15, sizeof(__pyx_k_15), 0, 1, 0, 0},
  {&__pyx_kp_u_16, __pyx_k_16, sizeof(__pyx_k_16), 0, 1, 0, 0},
  {&__pyx_n_s_2, __pyx_k_2, sizeof(__pyx_k_2), 0, 0, 1, 1},
  {&__pyx_kp_s_3, __pyx_k_3, sizeof(__pyx_k_3), 0, 0, 1, 0},
  {&__pyx_n_s_4, __pyx_k_4, sizeof(__pyx_k_4), 0, 0, 1, 1},
  {&__pyx_n_s_5, __pyx_k_5, sizeof(__pyx_k_5), 0, 0, 1, 1},
  {&__pyx_n_s_6, __pyx_k_6, sizeof(__pyx_k_6), 0, 0, 1, 1},
  {&__pyx_kp_u_8, __pyx_k_8, sizeof(__pyx_k_8), 0, 1, 0, 0},
  {&__pyx_kp_u_9, __pyx_k_9, sizeof(__pyx_k_9), 0, 1, 0, 0},
  {&__pyx_n_s____main__, __pyx_k____main__, sizeof(__pyx_k____main__), 0, 0, 1, 1},
  {&__pyx_n_s____repr__, __pyx_k____repr__, sizeof(__pyx_k____repr__), 0, 0, 1, 1},
  {&__pyx_n_s____test__, __pyx_k____test__, sizeof(__pyx_k____test__), 0, 0, 1, 1},
  {&__pyx_n_s___overallIndex, __pyx_k___overallIndex, sizeof(__pyx_k___overallIndex), 0, 0, 1, 1},
  {&__pyx_n_s__bits, __pyx_k__bits, sizeof(__pyx_k__bits), 0, 0, 1, 1},
  {&__pyx_n_s__c_str, __pyx_k__c_str, sizeof(__pyx_k__c_str), 0, 0, 1, 1},
  {&__pyx_n_s__fillBuffer, __pyx_k__fillBuffer, sizeof(__pyx_k__fillBuffer), 0, 0, 1, 1},
  {&__pyx_n_s__init_seed, __pyx_k__init_seed, sizeof(__pyx_k__init_seed), 0, 0, 1, 1},
  {&__pyx_n_s__iterateAutomata, __pyx_k__iterateAutomata, sizeof(__pyx_k__iterateAutomata), 0, 0, 1, 1},
  {&__pyx_n_s__p_generationLength, __pyx_k__p_generationLength, sizeof(__pyx_k__p_generationLength), 0, 0, 1, 1},
  {&__pyx_n_s__p_rule, __pyx_k__p_rule, sizeof(__pyx_k__p_rule), 0, 0, 1, 1},
  {&__pyx_n_s__p_seedIsRandom, __pyx_k__p_seedIsRandom, sizeof(__pyx_k__p_seedIsRandom), 0, 0, 1, 1},
  {&__pyx_n_s__printBuffer, __pyx_k__printBuffer, sizeof(__pyx_k__printBuffer), 0, 0, 1, 1},
  {&__pyx_n_s__pyautomata, __pyx_k__pyautomata, sizeof(__pyx_k__pyautomata), 0, 0, 1, 1},
  {&__pyx_n_s__range, __pyx_k__range, sizeof(__pyx_k__range), 0, 0, 1, 1},
  {&__pyx_n_s__size, __pyx_k__size, sizeof(__pyx_k__size), 0, 0, 1, 1},
  {&__pyx_n_s__thisptr, __pyx_k__thisptr, sizeof(__pyx_k__thisptr), 0, 0, 1, 1},
  {&__pyx_n_s__updateParams, __pyx_k__updateParams, sizeof(__pyx_k__updateParams), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_range = __Pyx_GetName(__pyx_b, __pyx_n_s__range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initpyAutomata(void); /*proto*/
PyMODINIT_FUNC initpyAutomata(void)
#else
PyMODINIT_FUNC PyInit_pyAutomata(void); /*proto*/
PyMODINIT_FUNC PyInit_pyAutomata(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  #if CYTHON_REFNANNY
  void* __pyx_refnanny = NULL;
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  __pyx_refnanny = __Pyx_RefNanny->SetupContext("PyMODINIT_FUNC PyInit_pyAutomata(void)", __LINE__, __FILE__);
  #endif
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __pyx_binding_PyCFunctionType_USED
  if (__pyx_binding_PyCFunctionType_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("pyAutomata"), __pyx_methods, __Pyx_DOCSTR(__pyx_k_7), 0, PYTHON_API_VERSION);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (!__pyx_m) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  #if PY_MAJOR_VERSION < 3
  Py_INCREF(__pyx_m);
  #endif
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME));
  if (!__pyx_b) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_module_is_main_PyAutomata__pyAutomata) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s____main__) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_10PyAutomata_10pyAutomata_pyautomata = &__pyx_vtable_10PyAutomata_10pyAutomata_pyautomata;
  #if PY_MAJOR_VERSION >= 3
  __pyx_vtable_10PyAutomata_10pyAutomata_pyautomata.updateParams = (PyObject *(*)(struct __pyx_obj_10PyAutomata_10pyAutomata_pyautomata *))__pyx_f_10PyAutomata_10pyAutomata_10pyautomata_updateParams;
  #else
  *(void(**)(void))&__pyx_vtable_10PyAutomata_10pyAutomata_pyautomata.updateParams = (void(*)(void))__pyx_f_10PyAutomata_10pyAutomata_10pyautomata_updateParams;
  #endif
  if (PyType_Ready(&__pyx_type_10PyAutomata_10pyAutomata_pyautomata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  {
    PyObject *wrapper = __Pyx_GetAttrString((PyObject *)&__pyx_type_10PyAutomata_10pyAutomata_pyautomata, "__repr__"); if (unlikely(!wrapper)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (Py_TYPE(wrapper) == &PyWrapperDescr_Type) {
      __pyx_wrapperbase_10PyAutomata_10pyAutomata_10pyautomata___repr__ = *((PyWrapperDescrObject *)wrapper)->d_base;
      __pyx_wrapperbase_10PyAutomata_10pyAutomata_10pyautomata___repr__.doc = __pyx_doc_10PyAutomata_10pyAutomata_10pyautomata___repr__;
      ((PyWrapperDescrObject *)wrapper)->d_base = &__pyx_wrapperbase_10PyAutomata_10pyAutomata_10pyautomata___repr__;
    }
  }
  if (__Pyx_SetVtable(__pyx_type_10PyAutomata_10pyAutomata_pyautomata.tp_dict, __pyx_vtabptr_10PyAutomata_10pyAutomata_pyautomata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "pyautomata", (PyObject *)&__pyx_type_10PyAutomata_10pyAutomata_pyautomata) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_10PyAutomata_10pyAutomata_pyautomata = &__pyx_type_10PyAutomata_10pyAutomata_pyautomata;
  /*--- Type import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "/home/blaine/Dropbox/src/Thesis/src/PyAutomata/pyAutomata.pyx":1
 * '''             # <<<<<<<<<<<<<<
 * (c) Blaine Booher 2010-2011
 * Licensed under GPLv2.0
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(((PyObject *)__pyx_t_1));
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__init_seed); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_8), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__iterateAutomata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_9), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__printBuffer); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_10), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s__fillBuffer); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_11), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_12), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s____repr__); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_13), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_14), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s_5); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_15), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetAttr(__pyx_m, __pyx_n_s__pyautomata); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetAttr(__pyx_t_2, __pyx_n_s_6); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetAttrString(__pyx_t_3, "__doc__"); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_t_1, ((PyObject *)__pyx_kp_u_16), __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyObject_SetAttr(__pyx_m, __pyx_n_s____test__, ((PyObject *)__pyx_t_1)) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(((PyObject *)__pyx_t_1)); __pyx_t_1 = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  if (__pyx_m) {
    __Pyx_AddTraceback("init PyAutomata.pyAutomata");
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init PyAutomata.pyAutomata");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */

static PyObject *__Pyx_GetName(PyObject *dict, PyObject *name) {
    PyObject *result;
    result = PyObject_GetAttr(dict, name);
    if (!result)
        PyErr_SetObject(PyExc_NameError, name);
    return result;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #else
        if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key)))
        #endif
            goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}


static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AS_STRING(kw_name));
        #endif
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *number, *more_or_less;

    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    number = (num_expected == 1) ? "" : "s";
    PyErr_Format(PyExc_TypeError,
        #if PY_VERSION_HEX < 0x02050000
            "%s() takes %s %d positional argument%s (%d given)",
        #else
            "%s() takes %s %zd positional argument%s (%zd given)",
        #endif
        func_name, more_or_less, num_expected, number, num_found);
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;

    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
        } else {
            #if PY_MAJOR_VERSION < 3
            if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key))) {
            #else
            if (unlikely(!PyUnicode_CheckExact(key)) && unlikely(!PyUnicode_Check(key))) {
            #endif
                goto invalid_keyword_type;
            } else {
                for (name = first_kw_arg; *name; name++) {
                    #if PY_MAJOR_VERSION >= 3
                    if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                        PyUnicode_Compare(**name, key) == 0) break;
                    #else
                    if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                        _PyString_Eq(**name, key)) break;
                    #endif
                }
                if (*name) {
                    values[name-argnames] = value;
                } else {
                    /* unexpected keyword found */
                    for (name=argnames; name != first_kw_arg; name++) {
                        if (**name == key) goto arg_passed_twice;
                        #if PY_MAJOR_VERSION >= 3
                        if (PyUnicode_GET_SIZE(**name) == PyUnicode_GET_SIZE(key) &&
                            PyUnicode_Compare(**name, key) == 0) goto arg_passed_twice;
                        #else
                        if (PyString_GET_SIZE(**name) == PyString_GET_SIZE(key) &&
                            _PyString_Eq(**name, key)) goto arg_passed_twice;
                        #endif
                    }
                    if (kwds2) {
                        if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                    } else {
                        goto invalid_keyword;
                    }
                }
            }
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, **name);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%s() got an unexpected keyword argument '%s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE unsigned char __Pyx_PyInt_AsUnsignedChar(PyObject* x) {
    const unsigned char neg_one = (unsigned char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned char" :
                    "value too large to convert to unsigned char");
            }
            return (unsigned char)-1;
        }
        return (unsigned char)val;
    }
    return (unsigned char)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned short __Pyx_PyInt_AsUnsignedShort(PyObject* x) {
    const unsigned short neg_one = (unsigned short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned short" :
                    "value too large to convert to unsigned short");
            }
            return (unsigned short)-1;
        }
        return (unsigned short)val;
    }
    return (unsigned short)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE unsigned int __Pyx_PyInt_AsUnsignedInt(PyObject* x) {
    const unsigned int neg_one = (unsigned int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(unsigned int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(unsigned int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to unsigned int" :
                    "value too large to convert to unsigned int");
            }
            return (unsigned int)-1;
        }
        return (unsigned int)val;
    }
    return (unsigned int)__Pyx_PyInt_AsUnsignedLong(x);
}

static CYTHON_INLINE char __Pyx_PyInt_AsChar(PyObject* x) {
    const char neg_one = (char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to char" :
                    "value too large to convert to char");
            }
            return (char)-1;
        }
        return (char)val;
    }
    return (char)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE short __Pyx_PyInt_AsShort(PyObject* x) {
    const short neg_one = (short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to short" :
                    "value too large to convert to short");
            }
            return (short)-1;
        }
        return (short)val;
    }
    return (short)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsInt(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE signed char __Pyx_PyInt_AsSignedChar(PyObject* x) {
    const signed char neg_one = (signed char)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed char) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed char)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed char" :
                    "value too large to convert to signed char");
            }
            return (signed char)-1;
        }
        return (signed char)val;
    }
    return (signed char)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed short __Pyx_PyInt_AsSignedShort(PyObject* x) {
    const signed short neg_one = (signed short)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed short) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed short)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed short" :
                    "value too large to convert to signed short");
            }
            return (signed short)-1;
        }
        return (signed short)val;
    }
    return (signed short)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE signed int __Pyx_PyInt_AsSignedInt(PyObject* x) {
    const signed int neg_one = (signed int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(signed int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(signed int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to signed int" :
                    "value too large to convert to signed int");
            }
            return (signed int)-1;
        }
        return (signed int)val;
    }
    return (signed int)__Pyx_PyInt_AsSignedLong(x);
}

static CYTHON_INLINE int __Pyx_PyInt_AsLongDouble(PyObject* x) {
    const int neg_one = (int)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (sizeof(int) < sizeof(long)) {
        long val = __Pyx_PyInt_AsLong(x);
        if (unlikely(val != (long)(int)val)) {
            if (!unlikely(val == -1 && PyErr_Occurred())) {
                PyErr_SetString(PyExc_OverflowError,
                    (is_unsigned && unlikely(val < 0)) ?
                    "can't convert negative value to int" :
                    "value too large to convert to int");
            }
            return (int)-1;
        }
        return (int)val;
    }
    return (int)__Pyx_PyInt_AsLong(x);
}

static CYTHON_INLINE unsigned long __Pyx_PyInt_AsUnsignedLong(PyObject* x) {
    const unsigned long neg_one = (unsigned long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned long");
            return (unsigned long)-1;
        }
        return (unsigned long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned long");
                return (unsigned long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        unsigned long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned long)-1;
        val = __Pyx_PyInt_AsUnsignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyInt_AsUnsignedLongLong(PyObject* x) {
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to unsigned PY_LONG_LONG");
            return (unsigned PY_LONG_LONG)-1;
        }
        return (unsigned PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to unsigned PY_LONG_LONG");
                return (unsigned PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (unsigned PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsUnsignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE long __Pyx_PyInt_AsLong(PyObject* x) {
    const long neg_one = (long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to long");
            return (long)-1;
        }
        return (long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long)-1;
        val = __Pyx_PyInt_AsLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_AsLongLong(PyObject* x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to PY_LONG_LONG");
            return (PY_LONG_LONG)-1;
        }
        return (PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to PY_LONG_LONG");
                return (PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed long __Pyx_PyInt_AsSignedLong(PyObject* x) {
    const signed long neg_one = (signed long)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed long");
            return (signed long)-1;
        }
        return (signed long)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed long");
                return (signed long)-1;
            }
            return PyLong_AsUnsignedLong(x);
        } else {
            return PyLong_AsLong(x);
        }
    } else {
        signed long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed long)-1;
        val = __Pyx_PyInt_AsSignedLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE signed PY_LONG_LONG __Pyx_PyInt_AsSignedLongLong(PyObject* x) {
    const signed PY_LONG_LONG neg_one = (signed PY_LONG_LONG)-1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_VERSION_HEX < 0x03000000
    if (likely(PyInt_Check(x))) {
        long val = PyInt_AS_LONG(x);
        if (is_unsigned && unlikely(val < 0)) {
            PyErr_SetString(PyExc_OverflowError,
                            "can't convert negative value to signed PY_LONG_LONG");
            return (signed PY_LONG_LONG)-1;
        }
        return (signed PY_LONG_LONG)val;
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to signed PY_LONG_LONG");
                return (signed PY_LONG_LONG)-1;
            }
            return PyLong_AsUnsignedLongLong(x);
        } else {
            return PyLong_AsLongLong(x);
        }
    } else {
        signed PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (signed PY_LONG_LONG)-1;
        val = __Pyx_PyInt_AsSignedLongLong(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItemString(dict, "__pyx_vtable__", ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"

static void __Pyx_AddTraceback(const char *funcname) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyObject *py_globals = 0;
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;

    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(__pyx_filename);
    #else
    py_srcfile = PyUnicode_FromString(__pyx_filename);
    #endif
    if (!py_srcfile) goto bad;
    if (__pyx_clineno) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, __pyx_clineno);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_code = PyCode_New(
        0,            /*int argcount,*/
        #if PY_MAJOR_VERSION >= 3
        0,            /*int kwonlyargcount,*/
        #endif
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple,  /*PyObject *consts,*/
        __pyx_empty_tuple,  /*PyObject *names,*/
        __pyx_empty_tuple,  /*PyObject *varnames,*/
        __pyx_empty_tuple,  /*PyObject *freevars,*/
        __pyx_empty_tuple,  /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        __pyx_lineno,   /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    if (!py_code) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = __pyx_lineno;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

/* Type Conversion Functions */

static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_VERSION_HEX < 0x03000000
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_VERSION_HEX < 0x03000000
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_VERSION_HEX < 0x03000000
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%s__ returned non-%s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject* x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
#if PY_VERSION_HEX < 0x02050000
   if (ival <= LONG_MAX)
       return PyInt_FromLong((long)ival);
   else {
       unsigned char *bytes = (unsigned char *) &ival;
       int one = 1; int little = (int)*(unsigned char*)&one;
       return _PyLong_FromByteArray(bytes, sizeof(size_t), little, 0);
   }
#else
   return PyInt_FromSize_t(ival);
#endif
}

static CYTHON_INLINE size_t __Pyx_PyInt_AsSize_t(PyObject* x) {
   unsigned PY_LONG_LONG val = __Pyx_PyInt_AsUnsignedLongLong(x);
   if (unlikely(val == (unsigned PY_LONG_LONG)-1 && PyErr_Occurred())) {
       return (size_t)-1;
   } else if (unlikely(val != (unsigned PY_LONG_LONG)(size_t)val)) {
       PyErr_SetString(PyExc_OverflowError,
                       "value too large to convert to size_t");
       return (size_t)-1;
   }
   return (size_t)val;
}


#endif /* Py_PYTHON_H */
